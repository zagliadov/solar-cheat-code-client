/**
 * Generated by orval v6.28.2 üç∫
 * Do not edit manually.
 * Solar Cheat Code
 * OpenAPI spec version: 1.0.0
 */
import { createInstance } from "./api-instance";
import type { BodyType } from "./api-instance";
export interface PatchSubscriptionDto {
  /** The end date of the subscription (optional) */
  endDate: string;
  /** Whether the subscription is active or not (optional) */
  isActive: boolean;
  /** The price of the subscription (optional) */
  price: string;
  /** The start date of the subscription (optional) */
  startDate: string;
  /** The type of subscription (optional) */
  type: string;
}

export interface SubscriptionDto {
  endDate: string;
  id: string;
  isActive: boolean;
  price: string;
  startDate: string;
  type: string;
  userId: string;
}

export interface PatchAccountDto {
  isBlockingEnabled: boolean;
}

export interface AccountDto {
  id: string;
  isBlockingEnabled: boolean;
  ownerId: string;
}

export interface GetSessionInfoDto {
  email: string;
  exp: number;
  iat: number;
  id: string;
}

export interface SignInBodyDto {
  email: string;
  password: string;
}

export interface SignUpBodyDto {
  email: string;
  firstName: string;
  lastName: string;
  password: string;
}

export interface HelloWorldDto {
  message: string;
}

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const appControllerGetHello = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<HelloWorldDto>({ url: `/`, method: "GET" }, options);
};

export const authControllerSignUp = (
  signUpBodyDto: BodyType<SignUpBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-up`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signUpBodyDto,
    },
    options,
  );
};

export const authControllerSignIn = (
  signInBodyDto: BodyType<SignInBodyDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    {
      url: `/auth/sign-in`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signInBodyDto,
    },
    options,
  );
};

export const authControllerSignOut = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<void>(
    { url: `/auth/sign-out`, method: "POST" },
    options,
  );
};

export const authControllerGetSessionInfo = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<GetSessionInfoDto>(
    { url: `/auth/session`, method: "GET" },
    options,
  );
};

export const accountControllerGetAccount = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    { url: `/account`, method: "GET" },
    options,
  );
};

export const accountControllerPatchAccount = (
  patchAccountDto: BodyType<PatchAccountDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<AccountDto>(
    {
      url: `/account`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchAccountDto,
    },
    options,
  );
};

export const subscriptionControllerGetSubscription = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<SubscriptionDto>(
    { url: `/subscriptions`, method: "GET" },
    options,
  );
};

export const subscriptionControllerPatchSubscription = (
  patchSubscriptionDto: BodyType<PatchSubscriptionDto>,
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PatchSubscriptionDto>(
    {
      url: `/subscriptions/update`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: patchSubscriptionDto,
    },
    options,
  );
};

export const subscriptionControllerCancelSubscription = (
  options?: SecondParameter<typeof createInstance>,
) => {
  return createInstance<PatchSubscriptionDto>(
    { url: `/subscriptions/cancel`, method: "PATCH" },
    options,
  );
};

export type AppControllerGetHelloResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AuthControllerSignUpResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignUp>>
>;
export type AuthControllerSignInResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignIn>>
>;
export type AuthControllerSignOutResult = NonNullable<
  Awaited<ReturnType<typeof authControllerSignOut>>
>;
export type AuthControllerGetSessionInfoResult = NonNullable<
  Awaited<ReturnType<typeof authControllerGetSessionInfo>>
>;
export type AccountControllerGetAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerGetAccount>>
>;
export type AccountControllerPatchAccountResult = NonNullable<
  Awaited<ReturnType<typeof accountControllerPatchAccount>>
>;
export type SubscriptionControllerGetSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof subscriptionControllerGetSubscription>>
>;
export type SubscriptionControllerPatchSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof subscriptionControllerPatchSubscription>>
>;
export type SubscriptionControllerCancelSubscriptionResult = NonNullable<
  Awaited<ReturnType<typeof subscriptionControllerCancelSubscription>>
>;
